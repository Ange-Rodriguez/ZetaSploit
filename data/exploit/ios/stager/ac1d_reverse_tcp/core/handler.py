#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import os

from core.badges import badges

from data.exploit.ios.stager.ac1d_reverse_tcp.core.terminator import terminator

class handler:
    def __init__(self):
        self.badges = badges()
        self.terminator = terminator()

    def generate_keys(self):
        self.badges.output_process("Generating SSL keys...")
        if not os.path.exists(".keys"):
            os.makedirs(".keys")
        os.system("cd .keys;" +
        "openssl genrsa -out server.key 2048 2>/dev/null;" +
        "openssl req -new -key server.key -subj '/C=US/ST=cyclone/L=cyclone/O=cyclone/CN=cyclone' -out server.csr;" +
        "openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt 2>/dev/null")

    def sendterm(self):
        terminator = self.terminator.generate_terminator()
        self.client.send(terminator.encode())
        return terminator

    def sendall(self, buffer):
        terminator = self.sendterm()
        self.client.send(buffer.encode())
        return terminator

    def recvall(self, terminator):
        result = b''
        while 1:
            data = self.client.recv(1024)
            if terminator.encode() in data:
                data = data.replace(terminator.encode(), b'')
                result += data
                break
            else:
                result += data
        return result